from aiogram.types import Message, CallbackQuery, ContentTypes, InputFile, ChatType
from aiogram.dispatcher import FSMContext
import aiogram
from datetime import datetime
import pytz
import asyncio
import xlsxwriter as xl
import os
from data.config import ADMINS
from keyboards.inline.admin_keys import AdminPanel, SendAd_Type, GoToAdminPanel, backDelete, DeleteUsers, BaseType, \
    answer_admin, back_user
from states.personalData import *
from loader import *
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


@dp.message_handler(state='*', text="/admin", user_id=ADMINS)
async def adminPanelfunc(message: Message, state: FSMContext):
    await state.finish()
    await message.answer(f"üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=AdminPanel)

@dp.callback_query_handler(state="*", text='GoToAdminPanel')
async def GoAdminPanelf(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(f"üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {call.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=AdminPanel)

@dp.callback_query_handler(state="*", text='add_posts_ru')
async def start_adding_post(call: CallbackQuery, state: FSMContext):
    await AddPostState.waiting_for_coursename.set()
    await call.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")

@dp.message_handler(state=AddPostState.waiting_for_coursename)
async def course_name_received(message: types.Message, state: FSMContext):
    await state.update_data(coursename=message.text)
    await AddPostState.waiting_for_text.set()
    await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")

@dp.message_handler(state=AddPostState.waiting_for_text)
async def text_received(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await AddPostState.waiting_for_image.set()
    await message.reply("–ù–∞–∫–æ–Ω–µ—Ü, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")

@dp.message_handler(content_types=['photo'], state=AddPostState.waiting_for_image)
async def image_received(message: types.Message, state: FSMContext):
    await state.update_data(image=message.photo[-1].file_id)
    data = await state.get_data()
    coursename = data['coursename']
    text = data['text']
    image_file_id = data['image']
    await state.finish()
    await message.reply(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ö—É—Ä—Å: {coursename}, —Ç–µ–∫—Å—Ç: {text}, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_file_id}")
    add_post.add_post(text, image_file_id, coursename)

@dp.callback_query_handler(state="*", text='add_posts_uz')
async def start_adding_post(call: CallbackQuery, state: FSMContext):
    await AddPostStateUz.waiting_for_coursenameUz.set()
    await call.message.reply("Kurs ismini kiriting:")

@dp.message_handler(state=AddPostStateUz.waiting_for_coursenameUz)
async def course_name_received(message: types.Message, state: FSMContext):
    await state.update_data(coursename=message.text)
    await AddPostStateUz.waiting_for_textUz.set()
    await message.reply("Endi kursning matnini kiriting:")

@dp.message_handler(state=AddPostStateUz.waiting_for_textUz)
async def text_received(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await AddPostStateUz.waiting_for_imageUz.set()
    await message.reply("Nihoyat, rasmni nashr qilish uchun yuboring.:")

@dp.message_handler(content_types=['photo'], state=AddPostStateUz.waiting_for_imageUz)
async def image_received(message: types.Message, state: FSMContext):
    await state.update_data(image=message.photo[-1].file_id)
    data = await state.get_data()
    coursenameUz = data['coursename']
    textUz = data['text']
    image_file_idUz = data['image']
    await state.finish()
    await message.reply(f"Xabar qo'shildi! Kurs: {coursenameUz}, matn: {textUz}, rasm identifikatori: {image_file_idUz}")
    add_postUz.add_postUz(textUz, image_file_idUz, coursenameUz)
# dp.register_message_handler(receive_post_text, state=AddPostState.waiting_for_text)
# dp.register_message_handler(receive_post_image, content_types=['photo'], state=AddPostState.waiting_for_image)

# @dp.callback_query_handler(state="*", text='admin:block')
# async def GoAdminPanelf(call: CallbackQuery, state: FSMContext):
#     await state.finish()
#     key = InlineKeyboardMarkup(row_width=3)
#     if int(banuser.count_users() // 5) == banuser.count_users() / 5:
#         users_count = banuser.count_users() // 5
#     else:
#         users_count = banuser.count_users() // 5 + 1
#     all_users = banuser.get_ban_users()
#     for i in range(0,5):
        
#         try:
#             data = await bot.get_chat(all_users[i])
#             fullname = data.fullname
#             key.add(InlineKeyboardButton(fullname,callback_data=f"user:{all_users[i]}"))
#         except:
#             try:
#                 key.add(InlineKeyboardButton(all_users[i],callback_data=f"user:{all_users[i]}"))
#             except:
#                 pass
#     if users_count > 1:
#         next_ = 2
#     else:
#         next_ = "no"
#     if users_count == 0:
#         users_count = 1
#     key.add(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",callback_data=f"previus:no"))
#     key.insert(InlineKeyboardButton(f"1/{users_count}",callback_data=f"page_count"))
#     key.insert(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥",callback_data=f"next:{next_}"))

#     key.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–ª—è—Ç—å",callback_data=f"admin:add_block_user"))
#     key.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",callback_data=f"GoToAdminPanel"))
#     await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏!",reply_markup=key)
@dp.callback_query_handler(state="*", text_contains ='admin:add_block_user')
async def GoAdminPanelf(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(f"üö´–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å: ",reply_markup=GoToAdminPanel)
    await state.set_state("new_block_user")

# @dp.message_handler(state="new_block_user")
# async def GoAdminPanelf(message: Message, state: FSMContext):
#     await state.finish()
#     channel = message.text
#     try:
#         msg = await bot.send_message(chat_id=channel,text=".")
#         await msg.delete()
#     except:
#         await message.answer("<b>‚ùå–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–æ—Ç–µ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ</b>\n\n\n<i>üîÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –µ—â–µ —Ä–∞–∑:</i>",reply_markup=GoToAdminPanel)
#         await state.set_state("new_block_user")
#     else:
#         if not(banuser.check_user(channel)):
#             banuser.ban_user(channel)
#             await message.answer("<b>‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.</b>\n\n\n<i>üë•–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.</i>")
#             await message.answer(f"üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",reply_markup=AdminPanel)
#             await state.finish()
#         else:
#             await message.answer("<b>‚úÖ–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω!</b>")
#             await message.answer(f"üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",reply_markup=AdminPanel)
#             await state.finish()

# @dp.callback_query_handler(state="*", text_contains ='next:')
# async def GoAdminPanelf(call: CallbackQuery, state: FSMContext):
#     await state.finish()
#     next_ = call.data.replace("next:","")
    

#     if next_ == "no":
#         await call.answer("‚ñ∂Ô∏è –ù–µ –º–æ–≥—É –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥")
#         return
#     current = int(next_)

#     key = InlineKeyboardMarkup(row_width=3)
#     if int(banuser.count_users() // 5) == banuser.count_users() / 5:
#         users_count = banuser.count_users() // 5
#     else:
#         users_count = banuser.count_users() // 5 + 1 

#     all_users = banuser.get_ban_users()

#     for i in range(int(next_) * 5 - 5,int(next_) * 5):
    
#         try:
#             data = await bot.get_chat(all_users[i])
#             fullname = data.fullname
#             key.add(InlineKeyboardButton(fullname,callback_data=f"user:{all_users[i]}"))
#         except:
#             try:

#                 key.add(InlineKeyboardButton(all_users[i],callback_data=f"user:{all_users[i]}"))
#             except:
#                 pass
#     if users_count <= int(current):
#         next_ = "no"
#     else:
#         next_ = int(current) + 1
#     if int(current-1) >= 1:
#         previus_ = current - 1
#     else: 
#         previus_ = "no"
#     key.add(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",callback_data=f"previus:{previus_}"))
#     key.insert(InlineKeyboardButton(f"{current}/{users_count}",callback_data=f"page_count"))
#     key.insert(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥",callback_data=f"next:{next_}"))

#     key.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–ª—è—Ç—å",callback_data=f"admin:add_block_user"))
#     key.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",callback_data=f"GoToAdminPanel"))
#     await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏!",reply_markup=key)

# @dp.callback_query_handler(state="*", text_contains ='previus:')
# async def GoAdminPanelf(call: CallbackQuery, state: FSMContext):
#     await state.finish()
#     previus_ = call.data.replace("previus:","")

#     if previus_ == "no":
#         await call.answer("üîô –ù–µ –º–æ–≥—É –¥–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞–∑–∞–¥")
#         return
#     current = int(previus_)
#     key = InlineKeyboardMarkup(row_width=3)
#     if int(banuser.count_users() // 5) == banuser.count_users() / 5:
#         users_count = banuser.count_users() // 5
#     else:
#         users_count = banuser.count_users() // 5 + 1
#     all_users = banuser.get_ban_users()
#     for i in range(int(previus_) * 5 - 5,int(previus_) * 5):
        
#         try:
#             data = await bot.get_chat(all_users[i])
#             key.add(InlineKeyboardButton(data.fullname,callback_data=f"user:{all_users[i]}"))
#         except Exception as e:
#             print(e)
#             key.add(InlineKeyboardButton(all_users[i],callback_data=f"user:{all_users[i]}"))
#     if users_count <= int(current):
#         next_ = "no"
#     else:
#         next_ = current + 1
#     if int(current-1) >= 1:
#         previus_ = int(current) - 1

#     else:
#         previus_ = "no"
#     key.add(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",callback_data=f"previus:{previus_}"))
#     key.insert(InlineKeyboardButton(f"{current}/{users_count}",callback_data=f"page_count"))
#     key.insert(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥",callback_data=f"next:{next_}"))

#     key.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–ª—è—Ç—å",callback_data=f"admin:add_block_user"))
#     key.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",callback_data=f"GoToAdminPanel"))
#     await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏!",reply_markup=key)

# @dp.callback_query_handler(state="*", text_contains ='user:')
# async def GoAdminPanelf(call: CallbackQuery, state: FSMContext):
#     await state.finish()
#     user_id = call.data.replace("user:","")
#     data = await bot.get_chat(user_id)
#     name = data.title
#     bio = data.bio
#     username = data.username
#     id = data.id
#     try: 
#         txt = await bot.send_message(chat_id=id,text=".")
#         await txt.delete()
#         bot_blocked = "‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
#     except:
#         bot_blocked = "‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"

#     btn = InlineKeyboardMarkup()
#     btn.add(InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞",callback_data=f"del_ban:{user_id}"))
#     btn.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f'GoToAdminPanel'))

#     await call.message.edit_text(f"""
# <b>‚ÄºÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>
#     <b>‚îú‚îÄ‚îÄ‚îÄüìõ–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {data.full_name} 
#     <b>‚îú‚îÄ‚îÄ‚îÄüîó–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{username}
#     <b>‚îú‚îÄ‚îÄ‚îÄüÜî–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{id}</code>
#     <b>‚îî‚îÄ‚îÄ‚îÄ‚ò£Ô∏è–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {bio} 
# ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
# <b>{bot_blocked}</b>
# """, reply_markup=btn)
# @dp.callback_query_handler(state="*", text_contains ='del_ban:')
# async def GoAdminPanelf(call: CallbackQuery, state: FSMContext):
#     await state.finish()
#     user_id = call.data.replace("del_ban:","")
#     if banuser.del_user(user_id):
#         await call.message.edit_text(f"""
# <b>‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.</b>


# <i>ü•±–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!</i>""",reply_markup=GoToAdminPanel)
#     else:
#         await call.message.edit_text(f"""
# <b>‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.</b>


# <i>ü•±–ü–æ—Ö–æ–∂–µ, –∫–∞–∫–æ–π-—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ –≤–∞—Å</i>""",reply_markup=GoToAdminPanel)

    
# @dp.callback_query_handler(state="*", text_contains ='del_channel:')
# async def GoAdminPanelf(call: CallbackQuery, state: FSMContext):
#     await state.finish()
#     chan_id = call.data.replace("del_channel:","")
#     if channels.del_channel(chan_id):
#         await call.message.edit_text(f"""
# <b>‚úÖ–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.</b>


# <i>ü•± –¢–µ–ø–µ—Ä—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.</i>""",reply_markup=GoToAdminPanel)
#     else:
#         await call.message.edit_text(f"""
# <b>‚ùå–ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.</b>


# <i>ü•±–ö–∞–∂–µ—Ç—Å—è, –∫–∞–∫–æ–π-—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –∫–∞–Ω–∞–ª –¥–æ –≤–∞—Å</i>""",reply_markup=GoToAdminPanel)

@dp.callback_query_handler(state="*", text_contains ='admin:add_channel')
async def GoAdminPanelf(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(f"üí´–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: ",reply_markup=GoToAdminPanel)
    await state.set_state("new_channel")

# @dp.message_handler(state="new_channel")
# async def GoAdminPanelf(message: Message, state: FSMContext):
#     await state.finish()
#     channel = message.text
#     try:
#         msg = await bot.send_message(chat_id=channel,text=".")
#         await msg.delete()
#     except:
#         await message.answer("<b>‚ùå–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–Ω–∞–ª–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ!</b>\n\n\n<i>üëÆüèª‚Äç‚ôÇÔ∏è –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –Ω–∞ –∫–∞–Ω–∞–ª–µ –∏ —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:</i>",reply_markup=GoToAdminPanel)
#         await state.set_state("new_channel")
#     else:
#         try:
#             channels.save_channel(channel)
#         except:
#             await message.answer("‚úÖ–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.")
#             await message.answer(f"üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",reply_markup=AdminPanel)
#             await state.finish()
#         else:
#             await message.answer("<b>‚úÖ–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.</b>\n\n\n<i>üë•–¢–µ–ø–µ—Ä—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞</i>")
#             await message.answer(f"üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",reply_markup=AdminPanel)
#             await state.finish()


# @dp.callback_query_handler(state="*", text_contains ='channel:')
# async def GoAdminPanelf(call: CallbackQuery, state: FSMContext):
#     await state.finish()
#     chan_id = call.data.replace("channel:","")
#     data = await bot.get_chat(chan_id)
#     name = data.title
#     bio = data.description
#     username = data.username
#     members_count = await bot.get_chat_members_count(chat_id=chan_id)
#     invite_link = data.invite_link
#     id = data.id
#     time = channels.get_time_channel(username=chan_id).split(" ")
#     btn = InlineKeyboardMarkup()
#     btn.add(InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞",callback_data=f"del_channel:{chan_id}"))
#     btn.add(InlineKeyboardButton(text="üîô Ortga", callback_data=f'GoToAdminPanel'))

#     await call.message.edit_text(f"""
# <b>‚ÄºÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ</b>
#     <b>‚îú‚îÄ‚îÄ‚îÄüìõ–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:</b> {name} 
#     <b>‚îú‚îÄ‚îÄ‚îÄüîó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–Ω–∞–ª–∞:</b> @{username}
#     <b>‚îú‚îÄ‚îÄ‚îÄüë•–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {members_count}
#     <b>‚îú‚îÄ‚îÄ‚îÄüÜî–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞:</b> <code>{id}</code>
#     <b>‚îî‚îÄ‚îÄ‚îÄ‚ò£Ô∏è–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:</b> {bio} 
# ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
# <b>üí•–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:
#     ‚îú‚îÄ‚îÄ‚îÄüìÖ –î–∞—Ç–∞:</b> {time[0]}<b>
#     ‚îî‚îÄ‚îÄ‚îÄ‚è∞ –í—Ä–µ–º—è: </b>{time[1]}
# """, reply_markup=btn)

# @dp.callback_query_handler(state="*", text='admin:channels')
# async def GoAdminPanelf(call: CallbackQuery, state: FSMContext):
#     await state.finish()
#     btn = InlineKeyboardMarkup(row_width=1)
#     l_channels = channels.get_channels()
#     for channel in l_channels:
#         data = await bot.get_chat(channel)
#         title = data.title
#         btn.add(InlineKeyboardButton(f"{title}",callback_data=f"channel:{channel}"))
#     btn.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–ª—è—Ç—å",callback_data=f"admin:add_channel"))
#     btn.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",callback_data=f"GoToAdminPanel"))
#     await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏!", reply_markup=btn)

# @dp.callback_query_handler(state='*', text='user_back')
# async def user_backfunc(call: CallbackQuery, state: FSMContext):
#     await state.finish()


@dp.callback_query_handler(state='*', text='admin:send_ad')
async def send_ad(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", reply_markup=SendAd_Type)


@dp.callback_query_handler(state='*', text='forward_habar')
async def forward_habar(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text("<b>üì£ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é</b>", reply_markup=GoToAdminPanel)
    await send_forwad.text.set()


@dp.message_handler(state=send_forwad.text, content_types=ContentTypes.ANY)
async def text_forward(message: Message, state: FSMContext):
    await state.finish()
    users = db.select_all_users()
    x = 0
    y = 0
    start = datetime.now(pytz.timezone('Asia/Tashkent'))
    i = await message.answer("üî∞ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    for user in users:
        try:
            await bot.forward_message(chat_id=user[0],
                                      from_chat_id=message.from_user.id,
                                      message_id=message.message_id)
            x += 1
        except:
            y += 1
        await asyncio.sleep(0.05)
    finish = datetime.now(pytz.timezone('Asia/Tashkent'))
    farq = finish - start
    await message.answer(f"<b>üì£ –†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n\n"
                         f"‚úÖ –ü—Ä–∏–Ω—è–ª: {x} ta\n"
                         f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {y}\n\n"
                         f"<b>‚è∞ –ù–∞—á–∞–ª:</b> {start.strftime('%H:%M:%S')}\n"
                         f"<b>‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π:</b> {finish.strftime('%H:%M:%S')}\n\n"
                         f"<b>üïì –û–±—â–µ–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</b> {farq.seconds} —Å–µ–∫—É–Ω–¥—ã", reply_markup=GoToAdminPanel)


@dp.callback_query_handler(state='*', text='oddiy_habar')
async def oddiy_habar(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text("""
<b>üì£ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>


<b>üîë–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> <i>
    ‚è∞–í—Ä–µ–º—è: {{time}} –∑–∞–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º, –∫–æ–≥–¥–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—à–ª–æ –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–º–µ—Ä: 18:39).
    üìÖ–î–∞—Ç–∞: {{date}} –∑–∞–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø—Ä–∏–º–µ—Ä: 25.11.2023).
    üìõ–ò–º—è: {{name}} –∑–∞–º–µ–Ω–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    üîóMention: {{mention}} –∑–∞–º–µ–Ω—è–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    üñá–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {{username}} –∑–∞–º–µ–Ω—è–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    üÜî –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {{id}} –∑–∞–º–µ–Ω–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    üë•–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {{users}} –∑–∞–º–µ–Ω–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
</i>
""", reply_markup=GoToAdminPanel)
    await sendAd.text.set()


@dp.message_handler(state=sendAd.text, content_types=ContentTypes.ANY)
async def rek_text(message: Message, state: FSMContext):
    await state.finish()
    users = db.select_all_users()
    x = 0
    y = 0
    start = datetime.now(pytz.timezone('Asia/Tashkent'))
    i = await message.answer("üî∞ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    skip = InlineKeyboardMarkup().add(InlineKeyboardButton("‚ùå", callback_data="skip"))
    count = str(db.count_users())
    for user in users:
        try:
            user_data  = await bot.get_chat(user[0])
            time = datetime.now(pytz.timezone('Asia/Tashkent'))
            ad = message.html_text
            ad = ad.replace("{{time}}",str(time.strftime('%H:%M:%S')))
            ad = ad.replace("{{date}}",str(time.date()))
            ad = ad.replace("{{name}}",str(user_data.full_name))
            ad = ad.replace("{{mention}}",str(user_data.get_mention()))
            ad = ad.replace("{{username}}",str(user_data.username))
            ad = ad.replace("{{id}}",str(user_data.id))
            ad = ad.replace("{{users}}",count[0])
            msg = await bot.send_message(chat_id=user[0],text=ad)
            x += 1
        except Exception as e:
            print(e)
            y += 1
        await asyncio.sleep(0.05)
    finish = datetime.now(pytz.timezone('Asia/Tashkent'))
    farq = finish - start
    await message.answer(f"<b>üì£ –†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n\n"
                         f"‚úÖ –ü—Ä–∏–Ω—è–ª: {x} ta\n"
                         f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {y} ta\n\n"
                         f"<b>‚è∞ –ù–∞—á–∞–ª:</b> {start.strftime('%H:%M:%S')}\n"
                         f"<b>‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π:</b> {finish.strftime('%H:%M:%S')}\n\n"
                         f"<b>üïì –û–±—â–µ–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</b> {farq.seconds} soniya", reply_markup=GoToAdminPanel)


@dp.callback_query_handler(state="*", text='admin:bot_stat')
async def bot_stat(call: CallbackQuery, state: FSMContext):
    await state.finish()
    count = db.count_users()[0]
    users = db.select_all_users()
    x = 0
    y = 0
    for user in users:
        try:
            await bot.get_chat(user[0])
            x += 1
        except:
            y += 1
    await call.answer(f"‚úÖ Aktiv: {x}\n"
                      f"‚ùå Bloklangan: {y}\n"
                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                      f"Umumiy: {count} ", show_alert=True)


@dp.callback_query_handler(state='*', text='admin:delete_users')
async def delete_users(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text("<b>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n\n"
                                 "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞", reply_markup=GoToAdminPanel)
    await verifyDeleteUsers.code.set()


@dp.message_handler(state=verifyDeleteUsers.code)
async def verifyCode(message: Message):
    if message.text == "8FSD778FSJ":
        await message.answer("–ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=DeleteUsers)
    else:
        await message.answer("–ö–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ", reply_markup=backDelete)
        await verifyDeleteUsers.code.set()


@dp.callback_query_handler(state='*', text='delete:verify')
async def deleteVerify(call: CallbackQuery, state: FSMContext):
    await state.finish()
    db.delete_users()
    textm = await call.message.edit_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω—ã")
    await asyncio.sleep(2)
    await textm.edit_text(f"üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {call.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=AdminPanel)


@dp.callback_query_handler(state='*', text='admin:base')
async def base(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text("–í –∫–∞–∫–æ–º —Ç–∏–ø–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É", reply_markup=BaseType)


@dp.callback_query_handler(state='*', text='database')
async def database(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    doc = InputFile('data/main.db')
    await call.message.answer_document(document=doc, caption="<b>main.db</b>\n"
                                                             "–ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    await call.message.answer(f"üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {call.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=AdminPanel)


@dp.callback_query_handler(state='*', text='excel')
async def excel(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    users = db.select_all_users()
    workbook = xl.Workbook("users.xlsx")
    bold_format = workbook.add_format({'bold': True})
    worksheet = workbook.add_worksheet("Users")
    worksheet.write('A1', 'ID', bold_format)
    worksheet.write('B1', '–ò–º—è', bold_format)
    worksheet.write('C1', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', bold_format)
    rowIndex = 2
    for user in users:
        tg_id = user[0]
        fullname = user[1]
        username = user[2]

        worksheet.write('A' + str(rowIndex), tg_id)
        worksheet.write('B' + str(rowIndex), fullname)
        worksheet.write('C' + str(rowIndex), f"@{username}")

        rowIndex += 1
    workbook.close()
    file = InputFile(path_or_bytesio="users.xlsx")
    await call.message.answer_document(document=file, caption="<b>users.xlsx</b>\n"
                                                              "–≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel")
    os.remove(path="users.xlsx")
    await call.message.answer(f"üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {call.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=AdminPanel)


@dp.callback_query_handler(state='*', text='admin:send_user')
async def send_user_func(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text("<b>üÜî ID</b>\n\n"
                                 "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=backDelete)
    await send_user.id.set()


@dp.message_handler(state=send_user.id)
async def id(message: Message, state: FSMContext):
    await state.update_data(id=message.text)

    await message.answer(f"<b>üìù –°–û–û–ë–©–ï–ù–ò–ï</b>\n\n"
                         f"[<code>{message.text}</code>] –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ ID",
                         reply_markup=backDelete)
    await send_user.habar.set()


@dp.message_handler(state=send_user.habar)
async def habar(message: Message, state: FSMContext):
    await state.update_data(habar=message.text)

    data = await state.get_data()
    id = data.get('id')
    habar = data.get('habar')
    status = bool
    try:
        await bot.send_message(chat_id=id, text=f"#admin_message\n"
                                                f"–ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                                                f"<b>üìù –°–û–û–ë–©–ï–ù–ò–ï:</b> {habar}\n\n"
                                                f"‚ÄºÔ∏è –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá", reply_markup=answer_admin)
        status = True
    except aiogram.exceptions.ChatNotFound:
        status = False
        await message.answer(f"<b>‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                             f"[<code>{id}</code>] –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                             f"–ò–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–æ—Ç–µ\n\n"
                             f"<i>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä</i>", reply_markup=GoToAdminPanel)
        await send_user.id.set()
    except:
        status = False
        await message.answer(f"<b>‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                             f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n"
                             f"<i>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä</i>", reply_markup=GoToAdminPanel)
        await send_user.id.set()
    if status:
        await message.answer(f"<b>‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>\n\n"
                             f"–ò–î–ï–ù–¢–ò–§–ò–ö–ê–¢–û–†: [<code>{id}</code>]\n"
                             f"–°–æ–æ–±—â–µ–Ω–∏–µ: {habar}\n\n"
                             f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        await state.finish()
        await message.answer(f"üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=AdminPanel)


@dp.callback_query_handler(state='*', text='answer_admin')
async def answeradmin(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(f"<b>üìù –°–û–û–ë–©–ï–ù–ò–ï</b>\n\n"
                                 f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=back_user)
    await answer.habar.set()


@dp.message_handler(state=answer.habar)
async def adminhabar(message: Message, state: FSMContext):
    await state.finish()
    status = bool
    try:
        status = True
        for admin in ADMINS:
            await bot.send_message(chat_id=admin, text=f"üÜï –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n"
                                                       f"üôçüèª‚Äç‚ôÇÔ∏è –ò–ú–Ø: {message.from_user.get_mention()}\n"
                                                       f"‚è∫ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}\n"
                                                       f"üÜî –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: [<code>{message.from_user.id}</code>]\n\n"
                                                       f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    except:
        status = False
    if status:
        await message.answer(f"<b>‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>\n\n"
                             f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n"
                             f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
                             "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=back_user)
